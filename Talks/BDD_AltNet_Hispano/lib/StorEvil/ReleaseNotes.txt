
----------------------------------------------------------------------------------------
StorEvil version 0.4 release notes
----------------------------------------------------------------------------------------

DONE:

	Debugging support
		you can now set breakpoints in your plaintext file.

		For your StorEvil project, you can enable F5-debugging in Visual Studio as follows:

			1. Right-click on the project in Solution Explorer, go to "Properties"
			2. Select the Debug tab
			3. Choose "Start external program"
			4. Enter the path to storevil.exe in the external program text box
			5. Set the working directory to the project directory

			You should now be able to set the project as your startup project, set
			some breakpoints in your feature files, and press F5.

			In the Locals window you will see a variable named "Contexts" that contains all of the active context objects.

			StorEvil's output will be sent to the debug window.

		For NUnit generation:
			"Debug" your generated test (tested in the ReSharper runner)

		Fixed some bugs

		Brought R# runner up to the latest RC build.

	StorEvil now supports parsing multiple word enum values.

		For example:

			public enum CityEnum {Seattle, NewYork, SanFrancisco}
			public void When_I_Live_In(CityEnum city) {}

		will now match any of the following

			When I live in New York
			When I Live in Seattle
			When I live in San Francisco

TODO:

	Support multiple word parameters for strings (via [MultipleWords] attribute)
	Support Context-injection in generated NUnit tests

----------------------------------------------------------------------------------------
StorEvil version 0.3 release notes
----------------------------------------------------------------------------------------

	This version fixes a number of minor issues.

	Also, NUnit fixture generation is now close to on par with in-place execution.

	It also adds a tutorial example project (which holds the code from the tutorial screencasts).

	StorEvil can now parse two-dimensional tables of any parseable type (int, decimal, DateTime, enums)

	StorEvil can now parse hashtable or single instance of a type from a set of name/values. Also fixed some bugs around this.

----------------------------------------------------------------------------------------
StorEvil version 0.2 release notes
----------------------------------------------------------------------------------------

	This version adds a number of enhancements to parsing of tables and lists of values, two new example projects, and improved HTML report output.
	It also adds the ability to generate stubbed "pending" steps for all plaintext stories that could not be interpreted.
	Also added: the "--debug" switch for tracing StorEvil internal parsing/executiong prgress.

	See below for more information on the new features.

	-----------
	HTML output
	-----------

	- Nicer HTML output by default.

	- Added suggestions for not implemented grammar to the default HTML template

	------------------------------
	Separated Assertions from Core
	------------------------------

	- Moved the ShouldXXXX extension methods out to a separate assembly (StorEvil.Assertions), so you can use StorEvil without them if desired.

	- Add StorEvil.Assertions to your Assemblies list in storevil.config to include these extension methods.

	------------------
	Automatic stubbing
	------------------

	- Added a new command "stub" which can be used to generate the initial set of context classes to a file, the clipboard, or stdout.

	- Generates stubs for any plaintext steps that could not be interpreted.

	- usage:
		storevil stub (--destination {destination_file_name} | --clipboard )

	- if no args specified, it will write to stdout (the console)

	- Made some improvements to the suggestion engine when dealing with scenario outline parameters.

	---------------------------------
	Added two more example projects
	---------------------------------

	- Bowling - features were copied from the SpecFlow project (note: different license for these files than the rest of StorEvil)

	- Tic Tac Toe

	---------------------------------
	Parsing/interpreting improvements
	---------------------------------

	- double-quoted strings are treated as a single term

		Given my name is "Foo Bar Baz Jr."

	Maps to:
		public void Given_my_name_is(string multiWordName)
		{
			// multiWordName = "Foo Bar Baz Jr."
		}

	- everything after a colon is treated as a single term

		Given some arbitrary text: foo bar baz
	Maps to:
		public void Given_some_arbitrary_text(string arbitraryText)
		{
			// arbitraryText = "foo bar baz"
		}
	- comma-separated values can be automatically mapped to an array

	For example:

		Given the following numbers: 1,2,3,4,5

	Maps to:

		public void Given_the_following_numbers(int[] numbers)
		{
			// numbers[0] = 1, numbers[1] =2, etc...
		}

	- Handle apostrophes (in contractions... map plaintext "it's" to C# "its").

	- HashTable/Dictionary & typed single argument parsing of Key/Value data in a table.

	For example:

		Given the following user:
		|FirstName|Foo|
		|LastName|Bar|

	Maps to:

		public class UserInfo {
			string FirstName { get; set; }
			string LastName { get; set; }
		}
		public void Given_the_following_user(UserInfo userInfo)
		{
			// userInfo.FirstName will be "Foo" here
		}

	... or you could write the following:
		public void Given_the_following_user(Hashtable info)
		{
			// info["FirstName"] will be "Foo"
		}

	-----------------
	Tracing/debugging
	-----------------
	- Added command line switch @--debug@ which enables some tracing output


TODO:

consider acceptance vs. regression a la StoryTeller
consider better syntax for tables (and/or HTML input with tables?)
editor or VS add in (suggestions from contexts?)